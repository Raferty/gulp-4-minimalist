/// Creates a menu icon with a set width, height, number of bars, and colors. The mixin uses the height of the icon and the weight of the bars to determine spacing. <div class="docs-example-burger"></div>
/// @param {Color} $color [$black] - Color to use for the icon.
/// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is hovered over.
/// @param {Number} $width [20px] - Width of the icon.
/// @param {Number} $height [16px] - Height of the icon.
/// @param {Number} $weight [2px] - Height of individual bars in the icon.
/// @param {Number} $bars [3] - Number of bars in the icon.

@mixin hamburger (
    $color: #000,
    $color-hover: #666,
    $width: 20px,
    $height: 16px,
    $weight: 3px,
    $bars: 3
) {
    $shadow: ();
    $hover-shadow: ();

    // Spacing between bars is calculated based on the total height of the icon and the weight of each bar

    $spacing: ($height - ($weight * $bars)) / ($bars - 1);

    @if unit($spacing) == 'px' {
        $spacing: floor($spacing);
    }

    @for $i from 2 through $bars {
        $offset: ($weight + $spacing) * ($i - 1);
        $shadow: append($shadow, 0 $offset 0 $color, comma);
    }

    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: $width;
    height: $height;
    cursor: pointer;

    &::after {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        width: 100%;
        height: $weight;
        background: $color;
        box-shadow: $shadow;
        content: "";
        transition: all 0.4s ease;
    }

    // Hover state

    @if $color-hover {
        // Generate CSS

        @for $i from 2 through $bars {
            $offset: ($weight + $spacing) * ($i - 1);
            $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
        }

        &:hover::after {
            background: $color-hover;
            box-shadow: $hover-shadow;
        }
    }
}
